// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(3)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  images   GeneratedImage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  amount    Int
  credits   Int
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GeneratedImage {
  id           String      @id @default(cuid())
  userId       String
  originalUrl  String
  generatedUrl String?
  prompt       String
  style        String
  status       ImageStatus @default(PROCESSING)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PerformanceMetric {
  id        String   @id @default(cuid())
  url       String
  userAgent String
  timestamp DateTime
  metrics   Json
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([timestamp])
  @@index([url])
}

model ErrorLog {
  id        String   @id @default(cuid())
  userId    String?
  error     String
  context   String
  stack     String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([userId])
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ImageStatus {
  PROCESSING
  COMPLETED
  FAILED
}
